
/********************************************************
 * Copyright (c) 2021 Alan Yorinks All rights reserved.

 This program is free software; you can redistribute it and/or
 modify it under the terms of the GNU AFFERO GENERAL PUBLIC LICENSE
 Version 3 as published by the Free Software Foundation; either
 or (at your option) any later version.
 This library is distributed in the hope that it will be useful,f
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 General Public License for more details.

 You should have received a copy of the GNU AFFERO GENERAL PUBLIC LICENSE
 along with this library; if not, write to the Free Software
 Foundation, Inc., 51 Franklin St, Fifth Floor, Boston, MA  02110-1301  USA
 */

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;; The hc_sr04 code is based on the work by GitJer ;;;;;;;;;;:
;; https://github.com/GitJer/Some_RPI-Pico_stuff/tree/main/HCSR04 ;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


.program hc_sr04

begin1:
    pull block      ; used as a manual trigger measurement and to receive the timeout value
    set pins 1      ; set the trigger to 1
                    ; delay for 10 us (the length of the trigger pulse)
    set x 19        ; set x to 10011 (and clear the higher bits)
    mov ISR x       ; copy x to ISR
    in NULL 6       ; shift in 6 more 0 bits
    mov x ISR       ; move the ISR to x (which now contains 10011000000)
delay1:
    jmp x-- delay1  ; count down to 0: a delay of (about) 10 us
    set pins 0      ; make the trigger 0 again, completing the trigger pulse
    wait 1 pin 0    ; wait for the echo pin to rise

                    ; start a counting loop to measure the length of the echo pulse
    mov x OSR       ; starts with the max cycle count for 400 cm (23200 us pulse) which is "out of range"
timer:
    jmp x-- test    ; count down
    jmp timerstop   ; timer has reached 0, stop count down
test:
    jmp pin timer   ; test if the echo pin is still 1, if so, continue counting down
timerstop:          ; echo pulse is over (or timer has reached 0)
    mov ISR x       ; move the value in x to the ISR
    push block      ; push the ISR into the Rx FIFO - use the default block method
    jmp begin1      ; once fifo read can go back to the start and wait for next request

% c-sdk {
static inline void hc_sr04_init(PIO pio, uint sm, uint offset, uint trig_pin, uint echo_pin) {
    gpio_set_pulls(echo_pin, false, false);         // make sure internal pull-up / pull-down not enabled on echo pin

    // Ensure that the state machine is not running before config
    pio_sm_set_enabled(pio, sm, false);
    // Clear all fifos
    pio_sm_clear_fifos(pio, sm);
    // restart the state machine
    pio_sm_restart(pio, sm);

    pio_gpio_init(pio, trig_pin);
    pio_gpio_init(pio, echo_pin);

    // initialise the output pin to output
    pio_sm_set_consecutive_pindirs(pio, sm, trig_pin, 1, true);

    // make an sm config
    pio_sm_config c = hc_sr04_program_get_default_config(offset);

    // set the 'in' pins, also used for 'wait'
    sm_config_set_in_pins(&c, echo_pin);
    // set the 'jmp' pin
    sm_config_set_jmp_pin(&c, echo_pin);
    // set the 'set' pins
    sm_config_set_set_pins(&c, trig_pin, 1);
    // set shift direction
    sm_config_set_in_shift(&c, false, false, 0);
    // init the pio sm with the config
    pio_sm_init(pio, sm, offset, &c);
    // enable the sm
    pio_sm_set_enabled(pio, sm, true);
}
%}
