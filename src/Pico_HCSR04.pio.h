// -------------------------------------------------- //
// This file is autogenerated by pioasm; do not edit! //
// -------------------------------------------------- //

#pragma once

#if !PICO_NO_HARDWARE
#include "hardware/pio.h"
#endif

// ------- //
// hc_sr04 //
// ------- //

#define hc_sr04_wrap_target 0
#define hc_sr04_wrap 15

static const uint16_t hc_sr04_program_instructions[] = {
            //     .wrap_target
    0x80a0, //  0: pull   block
    0xe001, //  1: set    pins, 1
    0xe033, //  2: set    x, 19
    0xa0c1, //  3: mov    isr, x
    0x4066, //  4: in     null, 6
    0xa026, //  5: mov    x, isr
    0x0046, //  6: jmp    x--, 6
    0xe000, //  7: set    pins, 0
    0x20a0, //  8: wait   1 pin, 0
    0xa027, //  9: mov    x, osr
    0x004c, // 10: jmp    x--, 12
    0x000d, // 11: jmp    13
    0x00ca, // 12: jmp    pin, 10
    0xa0c1, // 13: mov    isr, x
    0x8020, // 14: push   block
    0x0000, // 15: jmp    0
            //     .wrap
};

#if !PICO_NO_HARDWARE
static const struct pio_program hc_sr04_program = {
    .instructions = hc_sr04_program_instructions,
    .length = 16,
    .origin = -1,
};

static inline pio_sm_config hc_sr04_program_get_default_config(uint offset) {
    pio_sm_config c = pio_get_default_sm_config();
    sm_config_set_wrap(&c, offset + hc_sr04_wrap_target, offset + hc_sr04_wrap);
    return c;
}

static inline void hc_sr04_init(PIO pio, uint sm, uint offset, uint trig_pin, uint echo_pin) {
    gpio_set_pulls(echo_pin, false, false);         // make sure internal pull-up / pull-down not enabled on echo pin
    // Ensure that the state machine is not running before config
    pio_sm_set_enabled(pio, sm, false);
    // Clear all fifos
    pio_sm_clear_fifos(pio, sm);
    // restart the state machine
    pio_sm_restart(pio, sm);
    pio_gpio_init(pio, trig_pin);
    pio_gpio_init(pio, echo_pin);
    // initialise the output pin to output
    pio_sm_set_consecutive_pindirs(pio, sm, trig_pin, 1, true);
    // make an sm config
    pio_sm_config c = hc_sr04_program_get_default_config(offset);
    // set the 'in' pins, also used for 'wait'
    sm_config_set_in_pins(&c, echo_pin);
    // set the 'jmp' pin
    sm_config_set_jmp_pin(&c, echo_pin);
    // set the 'set' pins
    sm_config_set_set_pins(&c, trig_pin, 1);
    // set shift direction
    sm_config_set_in_shift(&c, false, false, 0);
    // init the pio sm with the config
    pio_sm_init(pio, sm, offset, &c);
    // enable the sm
    pio_sm_set_enabled(pio, sm, true);
}

#endif
